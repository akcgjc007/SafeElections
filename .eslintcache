[{"/home/pam/Documents/U_ETH_1/SafeElection/src/reportWebVitals.js":"1","/home/pam/Documents/U_ETH_1/SafeElection/src/eth/election.js":"2","/home/pam/Documents/U_ETH_1/SafeElection/src/App.js":"3","/home/pam/Documents/U_ETH_1/SafeElection/src/components/OneElection.js":"4","/home/pam/Documents/U_ETH_1/SafeElection/src/components/Elections.js":"5","/home/pam/Documents/U_ETH_1/SafeElection/src/eth/factory.js":"6","/home/pam/Documents/U_ETH_1/SafeElection/src/eth/web3.js":"7"},{"size":362,"mtime":1609195640679,"results":"8","hashOfConfig":"9"},{"size":269,"mtime":1609462262179,"results":"10","hashOfConfig":"9"},{"size":1435,"mtime":1609503088668,"results":"11","hashOfConfig":"9"},{"size":4496,"mtime":1609502875015,"results":"12","hashOfConfig":"9"},{"size":4393,"mtime":1609502946620,"results":"13","hashOfConfig":"9"},{"size":264,"mtime":1609498004722,"results":"14","hashOfConfig":"9"},{"size":513,"mtime":1609503085340,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15vlprj",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/pam/Documents/U_ETH_1/SafeElection/src/reportWebVitals.js",[],"/home/pam/Documents/U_ETH_1/SafeElection/src/eth/election.js",[],"/home/pam/Documents/U_ETH_1/SafeElection/src/App.js",[],"/home/pam/Documents/U_ETH_1/SafeElection/src/components/OneElection.js",["31"],"import React, { Component } from \"react\";\nimport { Segment, Icon, Header, Button, Message, Accordion } from \"semantic-ui-react\";\n\nimport ElectionObject from \"./../eth/election\"\nimport web3 from \"./../eth/web3\"\n\n\nexport default class OneElection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            addr: props.addr,\n            desc: null,\n            election: null,\n            candList: [],\n            activeIndex: false,\n            isManager: false,\n            electionStatus: null,\n            statusMessage: null,\n            winner: \"---\",\n        }\n    }\n\n    updateWinnerMessage = async () => {\n        this.setState({\n            statusMessage: <Message size=\"huge\" positive>\n                Winner: <b>{this.state.winner}</b>\n            </Message>\n        });\n    }\n\n    async componentDidMount() {\n        try {\n            this.setState({\n                election: await ElectionObject(this.state.addr),\n            });\n            this.setState({\n                desc: await this.state.election.methods.description().call(),\n                candList: await this.state.election.methods.giveCandList().call(),\n                electionStatus: await this.state.election.methods.votingStatus().call()\n            });\n\n            if (this.state.electionStatus === true) {\n                this.setState({\n                    statusMessage: <Message >You can vote.</Message>\n                });\n            } else {\n                const _winner = await this.state.election.methods.winnerCand().call();\n                this.setState({\n                    winner: _winner,\n                });\n                await this.updateWinnerMessage();\n            }\n\n\n        } catch (err) {\n            console.log(\"Error occured. \", err.message);\n        }\n\n        // Implement check manager function\n        const realManager = await this.state.election.methods.ORGANIZER().call();\n        const accounts = await web3.eth.getAccounts();\n\n        if (accounts[0] == realManager) {\n            this.setState({ isManager: true });\n        }\n    }\n\n    processRequest = async (index) => {\n        // Signal parent for loading \n        this.props.load();\n\n        // Now process the transaction\n        try {\n            const accounts = await web3.eth.getAccounts();\n            await this.state.election.methods.vote(index)\n                .send({\n                    from: accounts[0],\n                    gas: '1000000'\n                });\n        } catch (err) {\n            console.log(\"Error: \", err.message);\n        }\n\n        // Signal parent for stop loading\n        this.props.unload();\n    }\n\n    endElection = async () => {\n        // Signal parent for loading \n        this.props.load();\n\n        // Process the transaction\n        try {\n            const accounts = await web3.eth.getAccounts();\n            await this.state.election.methods.endVoting()\n                .send({\n                    from: accounts[0],\n                    gas: '5000000'\n                });\n        } catch (err) {\n            console.log(\"Error: \", err.message);\n        }\n\n        // Signal parent for stop loading\n        this.props.unload();\n    }\n\n    render() {\n        const options = this.state.candList.map((item, index) => {\n            return (\n                <Button\n                    disabled={!this.state.electionStatus}\n                    color=\"secondary\"\n                    key={index}\n                    onClick={() => this.processRequest(index)}\n                    content={item}\n                />\n            );\n        });\n\n        return (\n            <Segment>\n                <Header>{this.state.desc}</Header>\n                <Segment>{options}</Segment>\n                {this.state.statusMessage}\n\n                <Accordion hidden={!this.state.isManager || this.state.votingStatus}>\n                    <Accordion.Title as='h1' active={this.state.activeIndex}\n                        onClick={() => { this.setState({ activeIndex: !this.state.activeIndex }) }}>\n                        <Icon name='dropdown' />\n                        Admin tools\n                    </Accordion.Title>\n                    <Accordion.Content active={this.state.activeIndex}>\n                        <Button onClick={this.endElection} color=\"red\">\n                            End Election\n                        </Button>\n                    </Accordion.Content>\n                </Accordion>\n            </Segment>\n        );\n    }\n}","/home/pam/Documents/U_ETH_1/SafeElection/src/components/Elections.js",[],"/home/pam/Documents/U_ETH_1/SafeElection/src/eth/factory.js",[],"/home/pam/Documents/U_ETH_1/SafeElection/src/eth/web3.js",[],{"ruleId":"32","severity":1,"message":"33","line":64,"column":25,"nodeType":"34","messageId":"35","endLine":64,"endColumn":27},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]