{"version":3,"sources":["eth/web3.js","eth/factory.js","eth/election.js","components/OneElection.js","components/Elections.js","App.js","reportWebVitals.js","index.js"],"names":["web3","window","currentProvider","enable","Web3","provider","providers","HttpProvider","factory","eth","Contract","compiledContract","abi","election","address","a","OneElection","props","updateWinnerMessage","setState","statusMessage","Message","size","positive","state","winner","processRequest","index","loadFunction","getAccounts","accounts","methods","vote","send","from","gas","unloadFunction","endElection","endVoting","console","log","message","addr","desc","candList","activeIndex","isManager","electionStatus","this","ElectionObject","description","call","giveCandList","votingStatus","winnerCand","_winner","ORGANIZER","realManager","options","map","item","Button","disabled","color","onClick","Segment","Header","Accordion","hidden","Title","as","active","Icon","name","Content","Component","Election","messagesEndRef","React","createRef","scrollToBottom","current","scrollIntoView","behavior","onSubmit","event","preventDefault","_names","inputCand","split","createElection","inputDesc","isLoading","electionAddress","getDeployedElections","_addr","listItems","Container","primary","floated","content","ref","Form","Input","type","placeholder","label","labelPosition","value","onChange","target","App","async","rel","href","src","style","margin","Menu","inverted","Item","position","negative","fluid","align","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd595167.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nlet web3;\n\nif(typeof window !== 'undefined' && typeof window.web3 !== 'undefined'){\n    // in the browser and metamask is running\n    // getting web3 instance from metamask\n    window.web3.currentProvider.enable();\n    web3 = new Web3(window.web3.currentProvider);\n} else {\n    // metamask not available\n    const provider = new Web3.providers\n        .HttpProvider('https://kovan.infura.io/v3/19b85f951b5a4440923fa8f61eb27245');\n    web3 = new Web3(provider);\n};\n\nexport default web3;\n\n","// Preconfigured instance of the contract\nimport web3 from './web3';\nimport compiledContract from './build/Factory.json';\n\nconst factory = new web3.eth.Contract(\n    compiledContract.abi,\n    '0xa7720C51402CD81014609c4B08fd615BD043Ea5E'\n);\n\nexport default factory;","// Preconfigured instance of the contract\nimport web3 from './web3';\nimport compiledContract from './build/Election.json';\n\nexport default async function election (address){\n    return await new web3.eth.Contract(\n        compiledContract.abi,\n        address\n    );\n\n}","import React, { Component } from \"react\";\nimport ElectionObject from \"./../eth/election\"\nimport web3 from \"./../eth/web3\"\nimport { Segment, Icon, Header, Button, Input, Form, Container, Message, Card, Item, Accordion } from \"semantic-ui-react\";\n\n\nexport default class OneElection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            addr: props.addr,\n            desc: null,\n            election: null,\n            candList: [],\n            activeIndex: false,\n            isManager: false,\n            electionStatus: null,\n            statusMessage: null,\n            winner: \"---\",\n        }\n    }\n\n    updateWinnerMessage = async()=>{\n        this.setState({\n            statusMessage: <Message size=\"huge\" positive>\n                Winner: <b>{this.state.winner}</b>\n            </Message>\n        });\n    }\n\n    async componentDidMount() {\n        try {\n            this.setState({\n                election: await ElectionObject(this.state.addr),\n            });\n            this.setState({\n                desc: await this.state.election.methods.description().call(),\n                candList: await this.state.election.methods.giveCandList().call(),\n                electionStatus: await this.state.election.methods.votingStatus().call()\n            });\n\n            if(this.state.electionStatus === true){\n                this.setState({\n                    statusMessage: <Message >You can vote.</Message>\n                });\n            } else {\n                const _winner = await this.state.election.methods.winnerCand().call();            \n                this.setState({\n                    winner: _winner,\n                });\n                await this.updateWinnerMessage();\n            }\n\n\n        } catch (err) {\n            console.log(\"Error occured. \", err.message);\n        }\n\n        // Implement check manager function\n        const realManager = await this.state.election.methods.ORGANIZER().call();\n        const accounts = await web3.eth.getAccounts();\n        \n        if(accounts[0] == realManager){\n            this.setState({\n                isManager: true\n            });\n        }\n\n    }\n\n    processRequest = async (index) => {\n        // Signal parent for loading \n        this.props.loadFunction();\n        // Now process the transaction\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            await this.state.election.methods.vote(index)\n                .send({\n                    from: accounts[0],\n                    gas: '1000000'\n                });\n        } catch (err) {\n\n        }\n\n        // Signal parent for stop loading\n        this.props.unloadFunction();\n    }\n\n    endElection = async()=>{\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            await this.state.election.methods.endVoting()\n            .send({\n                from: accounts[0],\n                gas: '5000000'\n            });\n        } catch (err) {\n            console.log(\"Error: \", err.message);\n        }\n    }\n\n    render() {\n        const options = this.state.candList.map((item, index) => {\n            return (\n                <Button\n                    disabled={!this.state.electionStatus}\n                    color=\"secondary\"\n                    key={index}\n                    onClick={() => this.processRequest(index)}\n                >\n                    {item}\n                </Button>\n            );\n        });\n\n        return (\n            <Segment>\n                <Header>\n                    {this.state.desc}\n                </Header>\n                {/* <p>{this.state.addr}</p> */}\n                <Segment>\n                    {options}\n                </Segment>                \n                {this.state.statusMessage}\n\n                <Accordion hidden={!this.state.isManager || this.state.votingStatus}>\n                    <Accordion.Title as='h1' active={this.state.activeIndex} \n                    onClick={()=>{this.setState({activeIndex: !this.state.activeIndex})}}>\n                    <Icon name='dropdown' />\n                        Admin tools\n                    </Accordion.Title>\n                    <Accordion.Content active={this.state.activeIndex}>\n                        <Button onClick={this.endElection} color=\"red\">\n                            End Election \n                        </Button>\n                    </Accordion.Content>\n                </Accordion>\n            </Segment>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Segment, Icon, Header, Button, Input, Form, Container, Message, Card, Item, Accordion, Grid } from \"semantic-ui-react\";\n\nimport factory from \"./../eth/factory\"\nimport OneElection from \"./OneElection\";\nimport web3 from \"./../eth/web3\";\n\nexport default class Election extends Component {\n    messagesEndRef = React.createRef();\n    scrollToBottom = () => {\n        this.messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            electionAddress: [],\n            isLoading: false,\n            inputCand: \"\",\n            inputDesc: \"\"\n        }\n    }\n\n    onSubmit = async (event) => {\n        event.preventDefault();\n        console.log(\"SUBMITTING THE ELECTION.\");\n\n\n        const _names = this.state.inputCand.split(',');\n\n        // Signal parent for loading \n        this.loadFunction();\n        // Now process the transaction\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            const res = await factory.methods\n            .createElection(_names, this.state.inputDesc)\n            .send({\n                from: accounts[0],\n                gas: '5000000'\n            });\n        } catch (err) {\n\n        }\n\n        // Signal parent for stop loading\n        this.unloadFunction();\n    }\n\n    async componentDidMount() {\n        try {\n\n            const _addr = await factory.methods.getDeployedElections().call();\n\n            this.setState({\n                electionAddress: _addr\n            });\n        } catch (err) {\n            console.log(err.message);\n        }\n    }\n\n    loadFunction = () => {\n        this.setState({\n            isLoading: true\n        });\n    }\n    unloadFunction = () => {\n        this.setState({\n            isLoading: false\n        });\n    };\n\n\n\n\n    render() {\n        const listItems = this.state.electionAddress.map((addr) => (\n            <OneElection\n                key={addr}\n                loadFunction={this.loadFunction}\n                unloadFunction={this.unloadFunction}\n                addr={addr} />\n        ));\n\n        return (\n            <Container>\n                <Button\n                    onClick={this.scrollToBottom}\n                    primary floated=\"right\" content=\"HOST YOUR ELECTION\" />\n\n                {/* <Segment loading={this.state.isLoading}> */}\n                    {listItems}\n                {/* </Segment> */}\n\n                <div ref={this.messagesEndRef} />\n                <Segment>\n                    <Form>\n                        <Header>\n                            Launch your own election\n                        </Header>\n                        <Message>\n                            Rules:\n                            <li>After registering the election, voting would immediately begin for all users.</li>\n                            <li>After registering the election, you won't be able to change any information about candidates.</li>\n                            <li>After registering the election, you can end the election simply by going under admin tool.</li>\n                            <li>Admin tools would only be visible to you, when you login as your admin account.</li>\n\n                        </Message>\n\n\n\n\n\n\n                        <Input\n                            type=\"text\"\n                            placeholder=\"National elections.\"\n                            label=\"Description\"\n                            labelPosition=\"left\"\n                            value={this.state.inputDesc}\n                            onChange={event => this.setState({ inputDesc: event.target.value })}\n                        >\n                        </Input>\n                        <br />\n                        <br />\n                        <Input\n                            type=\"text\"\n                            placeholder=\"name1,name2,name3\"\n                            label=\"Names, comma separated.\"\n                            labelPosition='left'\n                            value={this.state.inputCand}\n                            onChange={event => this.setState({ inputCand: event.target.value })}\n                        >\n                        </Input>\n                        <br />\n                        <br />\n\n                        <Button\n                            primary\n                            onClick={this.onSubmit}\n                        >\n                            Start your election !\n                        </Button>\n                        <br />\n\n                    </Form>\n                </Segment>\n            </Container>\n        );\n    }\n\n}","import React, { Component } from 'react';\nimport { Container, Menu, Message, Icon } from 'semantic-ui-react';\n\nimport Elections from \"./components/Elections\";\n\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<link async rel=\"stylesheet\" href=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\" />\n\t\t\t\t<script async src=\"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js\" />\n\t\t\t\t<Container style={{ margin: '20px' }}>\n\t\t\t\t\t<Menu inverted>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<Menu.Item>\n\t\t\t\t\t\t\t<Icon name='box' />\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tSafe Elections\n\t\t\t\t\t\t\t<br />Tamper free ethereum based elections\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Menu.Item>\n\n\t\t\t\t\t\t<Menu.Item position='right'>\n\t\t\t\t\t\t\t\t<Message negative>\n\n\t\t\t\t\t\t\t\t<b>ATTENTION !!!</b>\n\t\t\t\t\t\t\t\t<br />All transactions are demo transactions hosted on Kovan testing network.\n\t\t\t\t\t\t\t\t<br />Please switch your wallet to Kovan testing network.\n\t\t\t\t\t\t\t\t</Message>\n\n\t\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t</Menu>\n\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<Elections />\n\t\t\t\t\t</Container>\n\t\t\t\t</Container>\n\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t<Container fluid>\n      \t\t<p style={{align: 'center'}}></p>\n    \t\t</Container>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}